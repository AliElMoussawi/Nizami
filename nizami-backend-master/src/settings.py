"""
Django settings for src project.

Generated by 'django-admin startproject' using Django 5.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
import os
from datetime import timedelta
from pathlib import Path

import environ
from langchain_openai import OpenAIEmbeddings
from langchain_postgres import PGVector
from langchain_postgres.vectorstores import DistanceStrategy

from src.common.utils import get_db_url

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

env = environ.Env(
    DEBUG=(bool, False),
)
environ.Env.read_env(os.path.join(BASE_DIR, '.env'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env('DEBUG')
ASPOSE_LICENSE_PATH = env('ASPOSE_LICENSE_PATH')

ALLOWED_HOSTS = [
    '*'
]

CORS_ALLOWED_ORIGINS = [
    'http://localhost:4200',
    'http://localhost:4201',

    'https://admin.nizami.xob-webservices.com',
    'https://nizami.xob-webservices.com',

    'https://www.admin.app.nizami.ai',
    'https://www.app.nizami.ai',
    'https://admin.app.nizami.ai',
    'https://app.nizami.ai',
]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'rest_framework',
    'allauth',
    'rest_framework_simplejwt',
    'corsheaders',
    'django_extensions',
    'django_q',

    'src.common',
    'src.authentication',
    'src.users',
    'src.reference_documents',
    'src.chats',
    'src.dashboard',
    'src.prompts',
    
    # Payment apps
    'src.plan',
    'src.payment',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    'corsheaders.middleware.CorsMiddleware',
]

ROOT_URLCONF = 'src.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'src.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': env('DB_DATABASE'),
        'USER': env('DB_USERNAME'),
        'PASSWORD': env('DB_PASSWORD'),
        'HOST': env('DB_HOST'),
        'PORT': env('DB_PORT'),
        'CONN_MAX_AGE': 600,
    },
    'logs': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': env('DB_DATABASE'),
        'USER': env('DB_USERNAME'),
        'PASSWORD': env('DB_PASSWORD'),
        'HOST': env('DB_HOST'),
        'PORT': env('DB_PORT'),
        'CONN_MAX_AGE': 600,
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    # {
    #     'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    # },
    # {
    #     'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    # },
    # {
    #     'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    # },
    # {
    #     'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    # },
]

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# settings.py
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],

    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
        'rest_framework_datatables.renderers.DatatablesRenderer',
    ),
    'DEFAULT_FILTER_BACKENDS': (
        'rest_framework_datatables.filters.DatatablesFilterBackend',
    ),
    'DEFAULT_PAGINATION_CLASS': 'rest_framework_datatables.pagination.DatatablesPageNumberPagination',
    'PAGE_SIZE': 50,
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(days=365),
    'AUTH_HEADER_TYPES': ('Bearer',),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=0),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': False,
}

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = env('EMAIL_HOST')
EMAIL_PORT = env('EMAIL_PORT')
EMAIL_USE_TLS = env.bool('EMAIL_USE_TLS')
EMAIL_HOST_USER = env('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = env('EMAIL_HOST_PASSWORD')
EMAIL_FROM_ADDRESS = env('EMAIL_FROM_ADDRESS')
# MAIL_MAILER=smtp


AUTH_USER_MODEL = 'users.User'

APPEND_SLASH = True

FRONTEND_DOMAIN = env('FRONTEND_DOMAIN')
FRONTEND_RESET_PASSWORD_TEMPLATE = env('FRONTEND_RESET_PASSWORD_TEMPLATE')

Q_CLUSTER = {
    'name': 'DjangoQ',
    'workers': 1,  # Number of worker processes
    'recycle': 50,  # Restart worker after processing 50 tasks
    'timeout': 60 * 60 * 2,  # Task timeout in seconds
    'retry': 60 * 60 * 2,
    'compress': True,  # Compress task payloads
    'save_limit': 50,  # Keep the last 50 task results in the database
    'queue_limit': 50,  # Limit the size of the queue
    'cpu_affinity': 1,  # Number of cores to use
    'orm': 'default',  # Use the default database as the broker
}

OPENAI_API_KEY = env('OPENAI_API_KEY')

embeddings = OpenAIEmbeddings(model='text-embedding-3-large', openai_api_key=OPENAI_API_KEY)
vectorstore = PGVector(
    collection_name="reference_document_parts",
    embeddings=embeddings,
    connection=get_db_url(),
    distance_strategy=DistanceStrategy.COSINE,
)


CSRF_TRUSTED_ORIGINS = [
    'https://api.nizami.xob-webservices.com',
    'https://admin.nizami.xob-webservices.com',
    'https://nizami.xob-webservices.com',
    'https://please-solved-leave-italiano.trycloudflare.com',
    'https://api.app.nizami.ai',
    'https://admin.app.nizami.ai',
    'https://app.nizami.ai',
    'https://www.admin.app.nizami.ai',
    'https://www.app.nizami.ai',
]

MOYASAR_URL = env('MOYASAR_URL')
MOYASAR_SECRET_KEY = env('MOYASAR_SECRET_KEY')
MOYASAR_WEBHOOK_SECRET_KEY = env('MOYASAR_WEBHOOK_SECRET_KEY')

